package com.itotem.chinahr.campus.network;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.Charset;
import java.security.KeyManagementException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateException;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpException;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.HttpVersion;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.conn.params.ConnManagerParams;
import org.apache.http.conn.scheme.PlainSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.params.HttpProtocolParams;
import org.apache.http.protocol.HTTP;
import org.apache.http.util.EntityUtils;

public class BaseRequest {
	private DefaultHttpClient client;

	public BaseRequest() {
		KeyStore trustStore;
		SSLSocketFactory sf = null;
		try {
			trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
			trustStore.load(null, null);
			sf = new SSLSocketFactoryEx(trustStore);
		    sf.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER); 

		} catch (KeyStoreException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (CertificateException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (KeyManagementException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (UnrecoverableKeyException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		HttpParams params = new BasicHttpParams();
		// 设置一些基本参数
		HttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);
		HttpProtocolParams.setContentCharset(params, HTTP.UTF_8);
		HttpProtocolParams.setUseExpectContinue(params, true);
		HttpProtocolParams.setUserAgent(params, "Mozilla/5.0(Linux;U;Android 2.2.1;en-us;Nexus One Build.FRG83) "
				+ "AppleWebKit/553.1(KHTML,like Gecko) Version/4.0 Mobile Safari/533.1");
		// 超时设置
		/* 从连接池中取连接的超时时间 */
		ConnManagerParams.setTimeout(params, 1000);
		/* 连接超时 */
		HttpConnectionParams.setConnectionTimeout(params, 30000);
		/* 请求超时 */
		HttpConnectionParams.setSoTimeout(params, 30000);

		// 设置我们的HttpClient支持HTTP和HTTPS两种模式
		SchemeRegistry schReg = new SchemeRegistry();
		schReg.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
//		schReg.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
		if(sf != null){//解决sony手机上的htts证书异常
		schReg.register(new Scheme("https", sf, 443));
		}
		// 使用线程安全的连接管理来创建HttpClient
		ClientConnectionManager conMgr = new ThreadSafeClientConnManager(params, schReg);
		client = new DefaultHttpClient(conMgr, params);
	}


	/**
	 * 多参数的get请求
	 * 
	 * @param params
	 * @param url
	 * @return
	 * @throws HttpException
	 * @throws IOException
	 */
	public String getRequest(List<NameValuePair> params, String url) throws HttpException, IOException,Exception {
		String result = null;

		String strURL;

		StringBuffer sb = new StringBuffer();
		if (params != null && params.size() > 0) {
			for (NameValuePair nvp : params) {
				sb.append(nvp.getName()).append('=').append(nvp.getValue()).append('&');
			}
			sb.deleteCharAt(sb.length() - 1);
		}
		String paramsStr = sb.toString();
		if (paramsStr != null && !paramsStr.equals("")) {
			strURL = url + "?" + paramsStr;
		} else {
			strURL = url;
		}
//		strURL = "https://jf365.boc.cn";
		System.out.println("strURL         "+strURL);
		HttpGet request = new HttpGet(strURL);
		HttpResponse response = client.execute(request);
		int httpStatusCode = response.getStatusLine().getStatusCode();
		if (httpStatusCode == HttpStatus.SC_OK) {
			result = EntityUtils.toString(response.getEntity());
			System.out.println("result             "+result);
		} else {
			throw new HttpException("Error Response:" + response.getStatusLine().toString());
		}

		return result;
	}

	/**
	 * get请求，无参数，return InputStream
	 * 
	 * @param url
	 * @return
	 * @throws HttpException
	 * @throws IOException
	 */
	public InputStream getRequest(String url) throws HttpException, IOException {
		InputStream result = null;
		HttpGet request = new HttpGet(url);
		HttpResponse response = client.execute(request);
		int httpStatusCode = response.getStatusLine().getStatusCode();
		if (httpStatusCode == 200) {
			result = response.getEntity().getContent();
		} else {
			throw new HttpException("Error Response:" + response.getStatusLine().toString());
		}
		return result;
	}

	/**
	 * 多参数的post请求
	 */
	public String postRequest(List<NameValuePair> params, String url) throws HttpException, IOException {
		String result = null;
		HttpPost request = new HttpPost(url);
		
		HttpEntity entity = new UrlEncodedFormEntity(params, "UTF-8");
		request.setEntity(entity);
		HttpResponse response = client.execute(request);
		System.out.println("ttpx：" + url + request);
		int httpStatusCode = response.getStatusLine().getStatusCode();
		if (httpStatusCode == HttpStatus.SC_OK) {
			result = EntityUtils.toString(response.getEntity());
		} else {
			throw new HttpException("Error Response:" + response.getStatusLine().toString());
		}

		return result;
	}

	/**
	 * 多参数，多文件的post请求
	 * 
	 * @param stringParams
	 * @param fileParams
	 * @param url
	 * @return
	 * @throws HttpException
	 * @throws IOException
	 */
	public String postRequest(List<NameValuePair> stringParams, List<NameValuePair> fileParams, String url)
			throws HttpException, IOException {
		String result = null;
		HttpPost request = new HttpPost(url);

		MultipartEntity entity = new MultipartEntity();
		for (NameValuePair snv : stringParams) {
			entity.addPart(snv.getName(), new StringBody(snv.getValue(), Charset.forName("UTF-8")));
		}

		for (NameValuePair fnv : fileParams) {
			File file = new File(fnv.getValue());
			if (file.isFile() && !file.isDirectory()) {
				entity.addPart(fnv.getName(), new FileBody(file));
			}
		}

		request.setEntity(entity);

		HttpResponse response = client.execute(request);

		int httpStatusCode = response.getStatusLine().getStatusCode();
		if (httpStatusCode == HttpStatus.SC_OK) {
			result = EntityUtils.toString(response.getEntity());
		} else {
			throw new HttpException("Error Response:" + response.getStatusLine().toString());
		}

		return result;
	}

}
